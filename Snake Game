import os  # Can be used for many different things, in this case used for clearing the screen.
import random  # Used to generate random numbers, which are used for placing the food item on the board.
import readchar  # Used to read single-character input from the user without requiring them to press Enter.
import threading  # Used to create and manage threads for simultaneous execution of tasks.
import time  # Used to cause delays.

def clear():
    """
    Clears the terminal screen.
    For Windows, uses the 'cls' command.
    For macOS and Linux, uses the 'clear' command.
    Requires: import os
    """
    # for windows
    if os.name == 'nt':
        os.system('cls')
    # for mac and linux (here, os.name is 'posix')
    else:
        os.system('clear')

def get_key():  # This function runs in a separate thread and continuously reads user input.
  global key
  global previous_valid
  global game_over
  global snake_squares
  while not game_over:  # It runs until the game is over.
    allowed = ["a", "s", "d", "w"]  # These are the valid directions the snake can move.
    if previous_valid == "a":
      allowed.remove("d")  # Prevents the snake from moving in the opposite direction of its current movement.
    elif previous_valid == "s":
      allowed.remove("w")
    elif previous_valid == "d":
      allowed.remove("a")
    elif previous_valid == "w":
      allowed.remove("s")
    else:
      raise Exception("Somethings wrong, I can feel it. key:", key, "previous_valid:", previous_valid, "snake_squares:", snake_squares)  # This exception is raised if an unexpected condition occurs.
    while key not in allowed and not game_over:  # It waits for a valid user input.
      key = readchar.readchar().lower()  # It reads a single character input from the user and converts it to lowercase.
    if key != previous_valid:  # If the new input is different from the previous valid direction:
      previous_valid = key  # Update the previous valid direction.
      pending_actions.append(previous_valid)  # Add the new valid direction to the pending actions list.
    key = "None"  # Reset the key variable after processing the input.

def run_game():  # This function runs in a separate thread and handles the game logic.
  global key
  global previous_valid
  global game_over
  global snake_squares
  x = snake_squares[-1][0]  # Get the x-coordinate of the snake's head.
  y = snake_squares[-1][1]  # Get the y-coordinate of the snake's head.
  for square in snake_squares:
    board[square[1]][square[0]] = "#"  # Draw the snake's body on the board.
  board[y][x] = "@"  # Draw the snake's head on the board.
  food_x = 5  # Initial x-coordinate of the food item.
  food_y = 5  # Initial y-coordinate of the food item.
  board[food_y][food_x] = "o"  # Draw the food item on the board.
  just_ate = False  # Flag to track if the snake just ate the food item.
  while not game_over:  # Game loop runs until the game is over.
    clear()  # Clear the terminal screen.
    printBoard()  # Print the current state of the board.
    board[y][x] = "#"  # Turn the snake's head into a "#" character so that the rest of the body will always be made of "#" characters.
    time.sleep(0.5)  # Create a delay to control the snake's speed.
    TARGET_ACTION = previous_valid if pending_actions == [] else pending_actions.pop(0)  # Get the next action from the pending actions list or use the previous valid direction.
    if TARGET_ACTION == "a":
      x -= 1  # Move the snake to the left.
    elif TARGET_ACTION == "d":
      x += 1  # Move the snake to the right.
    elif TARGET_ACTION == "w":
      y -= 1  # Move the snake up.
    elif TARGET_ACTION == "s":
      y += 1  # Move the snake down.
    if x < 0 or x > 9 or y < 0 or y > 9 or tuple((x, y)) in snake_squares:  # Check if the snake has hit a wall or its own body.
      game_over = True  # If so, signal the game_over flag.
      break  # Exit the game loop.
    if not just_ate: 
      board[snake_squares[0][1]][snake_squares[0][0]] = "."  # Clear the tail of the snake if it didn't just eat.
      del snake_squares[0]  # Remove the tail position from the snake's body list.
    just_ate = False  # Reset the just_ate flag.
    board[y][x] = "@"  # Draw the snake's head on the board.
    snake_squares.append(tuple((x, y)))  # Add the new head position to the snake's body list.
    if x == food_x and y == food_y:  # Check if the snake has eaten the food item.
      just_ate = True  # Set the just_ate flag.
      food_x, food_y = snake_squares[0]  # Set the new food position to a part of the snake's body, to activate the while loop
      while tuple((food_x, food_y)) in snake_squares:  # If the new food position overlaps with the snake's body.
        food_x, food_y = random.randint(0, 9), random.randint(0, 9)  # Generate a new random position for the food item.
      board[food_y][food_x] = "o"  # Draw the food item on the board.
  print(f"{'Game over!' if len(snake_squares) < 100 else 'Wow, you actually ... won?'} Your score was {len(snake_squares)-2}")  # Print the final score and message based on the snake's length.
  
while True:  # This is an infinite loop that keeps the game running continuously.
    board = []
    for i in range(10):
      board.append(["."] * 10)  # Creates a 10x10 board filled with "." characters, representing empty cells.

    game_over = False  # Flag that is used to track whether the game has ended or not.

    def printBoard():  # Prints the current state of the game board.
      for i in range(10):
        for j in range(10):
          print(board[i][j], end=" ")  # It prints each cell value separated by a space.
        print("")  # After each row, it moves to a new line.

    key = "None"  # Stores the current user input.
    previous_valid = "d"  # Keeps track of the previous valid direction the user inputted
    snake_squares = [(0, 4), (1, 4), (2, 4)]  # List of coordinates, stores the positions of the squares of the snake.
    pending_actions = []  # The user inputs that haven't been processed yet.
    game_over = False
    t1 = threading.Thread(target=get_key)  # Create a new thread for the get_key function.
    t2 = threading.Thread(target=run_game)  # Create a new thread for the run_game function.
    input("Press enter to start ")  # Wait for the user to press Enter to start the game.
    t1.start()  # Start the get_key thread.
    t2.start()  # Start the run_game thread.
    while not game_over:  # Wait for the game to end.
      pass
